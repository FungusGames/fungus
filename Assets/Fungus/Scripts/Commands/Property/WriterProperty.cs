// This code is part of the Fungus library (https://github.com/snozbot/fungus)
// It is released for free under the MIT open source license (https://github.com/snozbot/fungus/blob/master/LICENSE)

/*This script has been, partially or completely, generated by the Fungus.GenerateVariableWindow*/

using UnityEngine;

namespace Fungus
{
    /// <summary>
    /// Get or Set a property of a Writer component
    /// </summary>
    [CommandInfo("Property",
                 "Writer",
                 "Get or Set a property of a Writer component")]
    [AddComponentMenu("")]
    public class WriterProperty : BaseVariableProperty
    {
        //generated property
        public enum Property
        {
            EndDelay,
            WordTokensFound,
            WordTokensProcessed,
            HasWordsRemaining,
            IsWriting,
            IsWaitingForInput,
            Paused,
        }

        [SerializeField]
        protected Property property;

        [SerializeField]
        protected Writer writerVar;

        [SerializeField]
        [VariableProperty(typeof(FloatVariable),
                          typeof(IntegerVariable),
                          typeof(BooleanVariable))]
        protected Variable inOutVar;

        public override void OnEnter()
        {
            var iof = inOutVar as FloatVariable;
            var ioi = inOutVar as IntegerVariable;
            var iob = inOutVar as BooleanVariable;

            var target = writerVar;

            switch (getOrSet)
            {
                case GetSet.Get:
                    switch (property)
                    {
                        case Property.EndDelay:
                                 iof.Value = target.EndDelay;
                                 break;

                        case Property.WordTokensFound:
                                 ioi.Value = target.WordTokensFound;
                                 break;

                        case Property.WordTokensProcessed:
                                 ioi.Value = target.WordTokensProcessed;
                                 break;

                        case Property.HasWordsRemaining:
                                 iob.Value = target.HasWordsRemaining;
                                 break;

                        case Property.IsWriting:
                                 iob.Value = target.IsWriting;
                                 break;

                        case Property.IsWaitingForInput:
                                 iob.Value = target.IsWaitingForInput;
                                 break;

                        case Property.Paused:
                                 iob.Value = target.Paused;
                                 break;

                        default:
                        Debug.Log("Unsupported get or set attempted");
                        break;
                    }

                    break;

                case GetSet.Set:
                    switch (property)
                    {
                        case Property.EndDelay:
                                 target.EndDelay = iof.Value;
                                 break;

                        case Property.Paused:
                                 target.Paused = iob.Value;
                                 break;

                        default:
                        Debug.Log("Unsupported get or set attempted");
                        break;
                    }

                    break;

                default:
                break;
            }

            writerVar = target;

            Continue();
        }

        public override string GetSummary()
        {
            if (writerVar == null)
            {
                return "Error: no writerVar set";
            }
            if (inOutVar == null)
            {
                return "Error: no variable set to push or pull data to or from";
            }

            return getOrSet.ToString() + " " + property.ToString();
        }

        public override Color GetButtonColor()
        {
            return new Color32(235, 191, 217, 255);
        }

        public override bool HasReference(Variable variable)
        {
            if (writerVar == variable || inOutVar == variable)
                return true;

            return false;
        }
    }
}
